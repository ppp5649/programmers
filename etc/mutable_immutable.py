# python 특징

# 동적 바인딩(Duck Typing) 언어이다.
# 변수에 데이터 타입이 정의되는 것이 아니라 프로그램이 실행될 때 변수에 할당되는 객체의 데이터 타입에 따라 정해진다.

# 강한 타입 언어이다.
# 다른 데이터 타입끼리 연산을 할 때 반드시 데이터 타입 변환이 이루어져야한다.
# 그렇지않으면 에러가 발생한다.


# 문자열 값 덧붙이기
s = "abcd"
print(id(s))

print(s + "e")  # "abcde"인 새로운 객체가 출력됨
# 변수에 값이 대입되지 않았기 때문에 가비지 컬렉션 대상이 되어 다시 호출할 수 없음


print(s)
print((id(s)))  # s가 참조하는 객체는 변하지 않았음

s = s + "e"  # 변수 s가 s에 "e"를 더한 새로운 객체를 참조하도록 재선언
print(s)  # 값 변경
print(id(s))  # 객체 변경 (id값 달라짐)


# 리스트 값 덧붙이기
arr = ["a", "b", "c", "d"]
print(id(arr))

arr.append("e")
print(arr)  # 값 변경
print(id(arr))  # 객체 변경 X

# mutable 객체는 값이 변경 가능하지만 immutable 객체는 값을 변경하려면 새로운 객체를 참조하는 방법밖에 없다. 즉, 변경 불가능하다.
# 이러한 구분이 이루어진 이유는 성능 때문이라고 한다.
# immutable 객체가 계속해서 변경된다면 그 객체들이 메모리에 쌓이게 되고 가비지 컬렉션 대상에 포함되지 않는다면 메모리 낭비가 생기기 때문이다.
